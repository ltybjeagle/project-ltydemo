运行机制：单线层运行，性能快
1、纯内存操作
2、单线程，避免频繁的上下文切换
3、非阻塞I/O多路复用机制

Redis类型：
1、String
2、Hash
3、List
4、Set
5、Sorted Set

淘汰逻辑：
过期策略：定期删除 + 惰性删除
    1、默认100ms检查，随机抽取部分检查，过期删除
    2、惰性删除在访问KEY的时候检查KEY是否过期
    3、存在问题：存在KEY删除不掉
淘汰策略：
    1、noenviction（驱逐）：禁止驱逐数据，直接报错
    2、allkeys-lru：从数据集中挑选最近最少使用的数据淘汰
    3、allkeys-random：从数据集中任意选择数据淘汰
    4、voltile-lru：从设置过期时间的数据集中挑选最近最少使用的数据淘汰
    5、volatile-random：从设置过期时间的数据集中任意选择数据淘汰
    6、volatile-ttl：从设置过期时间的数据集中挑选将要过期的数据淘汰

作为缓存难点：
1、Redis与数据库双写一致性问题：
    a、先写数据库，在删除缓存
    b、对于删除缓存失败情况，提供补偿措施（如消息队列）
2、缓存穿透：故意请求不存在的KEY，导致压力打到数据库
    1、使用互斥锁
    2、异步更新策略
3、缓存雪崩：统一时间大批缓存失效
    1、使用互斥锁
    2、双缓存，一份缓存有时效，一份缓存没有时效，异步同步缓存信息

主从配置：
1、从节点redis.conf增加一行配置：replicaof 主节点IP 主节点端口
	从节点只支持查询操作
2、哨兵监听，主从切换配置（sentinel.conf）：
	sentinel monitor mymaster 127.0.0.1 6379 2 #指定要检测的实例，别名+iP地址+端口。2表示至少2个sentinel实例同时检测到redis server异常，才判断为宕机
	sentinel down-after-milliseconds mymaster 30000 #指定某个sentinel实例监控到某个redis实例持续异常多少时间(毫秒)，才判断状态为down